#+TITLE: web.org 
#+DATE: Tue Aug 19 11:32:45 2014
#+AUTHOR: Shunchao Wang
#+EMAIL: shunchao.wang@osumc.edu

* Tasks
* Notes
** Grails with jQuery ajax file uploading
*** Controller
- File uploading action
class FileCotroller {
	def upload() {
        if (!(request instanceof MultipartHttpServletRequest)) {
        	// request must be Multipart... to support file
        	// uploading
             return   
        }
        List file = request.getFiles('file')
        def fileName = 'uploaded.zip'
        ZipOutputStream zipFile =
        	new ZipOutputStream(new FileOutputStream(fileName))
        file.each { f ->
        	zipFile.putNextEntry(f.originalFilename)
          def buffer = new byte[1024]
          def length = 0
          InputStream is = f.getInputStream()
          while ((length = is.read(buffer)) > 0) {
	  		zipFile.write(buffer, 0, length)
          }
          zipFile.closeEntry()
          is.close()
        }
        zipFile.close()
        render(contentType: 'text/json') {
		[success: true]
        }
	}
}
*** gsp page
- form of upload.gsp
<form enctype='multipart/form-data' name='fileForm' id='fileForm'
	method='POST'>
        <input name='fileName' />
        <input type='file' name='file' multiple />
</form>
*** jQuery
- submit form
$('fileForm').submit(function(e) {
  var formData = new FormData(this);
	e.preventDefault();
  e.stopPropagation();
  $.ajax({
		type: 'POST',
          url: '/file/upload',
          // set mimeType
          mimeType: 'multipart/form-data',
          // prevent jquery from convert content
          // into query string
          contentType: false,
          // prevent jquery from processing files
          // into string
          processData: false,
          cache: false,
          data: formData,
          error: function() {
			alert('There was an error.');
          },
          success: function(data) {
         	      if (data.success) {
			// do sth
                }
          }
  });
});

** How HTTP sends html form
An html <form> can be sent in four ways
1. using POST method and setting the enctype to application/x-www-urlencoded(default);
2. using POST method and setting the enctype to text/plain;
3. using POST method and setting the enctype to multipart/form-data;
4. using GET method (in this case the enctype will be ignored).
Now, consider to submit a form containing two fields, named foo and
baz. If using POST server will get:
*** POST with enctype='application/x-www-form-urlencoded'
Content-Type: application/x-www-form-urlencoded
foo=bar&bar=The+first+line.&#37;0D%0AThe+second+line.%0D%0A
*** POST with enctype='text/plain'
Content-Type: text/plain
foo=bar
baz=The first line.
The second line.
*** POST with enctype='multipart/form-data'
Content-Type: multipart/form-data;
boundary=-------------314911788813839

-------------314911788813839
Content-Disposition: form-data; name="foo"

bar
-------------314911788813839
Content-Disposition: form-data; name="baz"

The first line.
The second line.
*** GET method, a string like the following will be simply added to the URL:
?foo=bar&baz=The%20first%20line.%0AThe%20second%20line.

